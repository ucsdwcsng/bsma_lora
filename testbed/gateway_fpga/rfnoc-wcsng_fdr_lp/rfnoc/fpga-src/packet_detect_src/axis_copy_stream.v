// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="axis_copy_stream,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325tffg900-3,HLS_INPUT_CLOCK=4.650000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=225,HLS_SYN_LUT=262,HLS_VERSION=2018_3}" *)

module axis_copy_stream (
        ap_clk,
        ap_rst_n,
        data_in_TDATA,
        data_in_TVALID,
        data_in_TREADY,
        data_in_TLAST,
        data_out1_TDATA,
        data_out1_TVALID,
        data_out1_TREADY,
        data_out1_TLAST,
        data_out2_TDATA,
        data_out2_TVALID,
        data_out2_TREADY,
        data_out2_TLAST
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] data_in_TDATA;
input   data_in_TVALID;
output   data_in_TREADY;
input  [0:0] data_in_TLAST;
output  [31:0] data_out1_TDATA;
output   data_out1_TVALID;
input   data_out1_TREADY;
output  [0:0] data_out1_TLAST;
output  [31:0] data_out2_TDATA;
output   data_out2_TVALID;
input   data_out2_TREADY;
output  [0:0] data_out2_TLAST;

 reg    ap_rst_n_inv;
reg   [31:0] data_in_V_data_V_0_data_out;
wire    data_in_V_data_V_0_vld_in;
wire    data_in_V_data_V_0_vld_out;
wire    data_in_V_data_V_0_ack_in;
reg    data_in_V_data_V_0_ack_out;
reg   [31:0] data_in_V_data_V_0_payload_A;
reg   [31:0] data_in_V_data_V_0_payload_B;
reg    data_in_V_data_V_0_sel_rd;
reg    data_in_V_data_V_0_sel_wr;
wire    data_in_V_data_V_0_sel;
wire    data_in_V_data_V_0_load_A;
wire    data_in_V_data_V_0_load_B;
reg   [1:0] data_in_V_data_V_0_state;
wire    data_in_V_data_V_0_state_cmp_full;
reg   [0:0] data_in_V_last_V_0_data_out;
wire    data_in_V_last_V_0_vld_in;
wire    data_in_V_last_V_0_vld_out;
wire    data_in_V_last_V_0_ack_in;
reg    data_in_V_last_V_0_ack_out;
reg   [0:0] data_in_V_last_V_0_payload_A;
reg   [0:0] data_in_V_last_V_0_payload_B;
reg    data_in_V_last_V_0_sel_rd;
reg    data_in_V_last_V_0_sel_wr;
wire    data_in_V_last_V_0_sel;
wire    data_in_V_last_V_0_load_A;
wire    data_in_V_last_V_0_load_B;
reg   [1:0] data_in_V_last_V_0_state;
wire    data_in_V_last_V_0_state_cmp_full;
reg   [31:0] data_out1_V_data_V_1_data_out;
reg    data_out1_V_data_V_1_vld_in;
wire    data_out1_V_data_V_1_vld_out;
wire    data_out1_V_data_V_1_ack_in;
wire    data_out1_V_data_V_1_ack_out;
reg   [31:0] data_out1_V_data_V_1_payload_A;
reg   [31:0] data_out1_V_data_V_1_payload_B;
reg    data_out1_V_data_V_1_sel_rd;
reg    data_out1_V_data_V_1_sel_wr;
wire    data_out1_V_data_V_1_sel;
wire    data_out1_V_data_V_1_load_A;
wire    data_out1_V_data_V_1_load_B;
reg   [1:0] data_out1_V_data_V_1_state;
wire    data_out1_V_data_V_1_state_cmp_full;
reg   [0:0] data_out1_V_last_V_1_data_out;
reg    data_out1_V_last_V_1_vld_in;
wire    data_out1_V_last_V_1_vld_out;
wire    data_out1_V_last_V_1_ack_in;
wire    data_out1_V_last_V_1_ack_out;
reg   [0:0] data_out1_V_last_V_1_payload_A;
reg   [0:0] data_out1_V_last_V_1_payload_B;
reg    data_out1_V_last_V_1_sel_rd;
reg    data_out1_V_last_V_1_sel_wr;
wire    data_out1_V_last_V_1_sel;
wire    data_out1_V_last_V_1_load_A;
wire    data_out1_V_last_V_1_load_B;
reg   [1:0] data_out1_V_last_V_1_state;
wire    data_out1_V_last_V_1_state_cmp_full;
reg   [31:0] data_out2_V_data_V_1_data_out;
reg    data_out2_V_data_V_1_vld_in;
wire    data_out2_V_data_V_1_vld_out;
wire    data_out2_V_data_V_1_ack_in;
wire    data_out2_V_data_V_1_ack_out;
reg   [31:0] data_out2_V_data_V_1_payload_A;
reg   [31:0] data_out2_V_data_V_1_payload_B;
reg    data_out2_V_data_V_1_sel_rd;
reg    data_out2_V_data_V_1_sel_wr;
wire    data_out2_V_data_V_1_sel;
wire    data_out2_V_data_V_1_load_A;
wire    data_out2_V_data_V_1_load_B;
reg   [1:0] data_out2_V_data_V_1_state;
wire    data_out2_V_data_V_1_state_cmp_full;
reg   [0:0] data_out2_V_last_V_1_data_out;
reg    data_out2_V_last_V_1_vld_in;
wire    data_out2_V_last_V_1_vld_out;
wire    data_out2_V_last_V_1_ack_in;
wire    data_out2_V_last_V_1_ack_out;
reg   [0:0] data_out2_V_last_V_1_payload_A;
reg   [0:0] data_out2_V_last_V_1_payload_B;
reg    data_out2_V_last_V_1_sel_rd;
reg    data_out2_V_last_V_1_sel_wr;
wire    data_out2_V_last_V_1_sel;
wire    data_out2_V_last_V_1_load_A;
wire    data_out2_V_last_V_1_load_B;
reg   [1:0] data_out2_V_last_V_1_state;
wire    data_out2_V_last_V_1_state_cmp_full;
reg    data_in_TDATA_blk_n;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state2;
reg    data_out1_TDATA_blk_n;
reg    data_out2_TDATA_blk_n;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state1_io;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;

// power-on initialization
initial begin
#0 data_in_V_data_V_0_sel_rd = 1'b0;
#0 data_in_V_data_V_0_sel_wr = 1'b0;
#0 data_in_V_data_V_0_state = 2'd0;
#0 data_in_V_last_V_0_sel_rd = 1'b0;
#0 data_in_V_last_V_0_sel_wr = 1'b0;
#0 data_in_V_last_V_0_state = 2'd0;
#0 data_out1_V_data_V_1_sel_rd = 1'b0;
#0 data_out1_V_data_V_1_sel_wr = 1'b0;
#0 data_out1_V_data_V_1_state = 2'd0;
#0 data_out1_V_last_V_1_sel_rd = 1'b0;
#0 data_out1_V_last_V_1_sel_wr = 1'b0;
#0 data_out1_V_last_V_1_state = 2'd0;
#0 data_out2_V_data_V_1_sel_rd = 1'b0;
#0 data_out2_V_data_V_1_sel_wr = 1'b0;
#0 data_out2_V_data_V_1_state = 2'd0;
#0 data_out2_V_last_V_1_sel_rd = 1'b0;
#0 data_out2_V_last_V_1_sel_wr = 1'b0;
#0 data_out2_V_last_V_1_state = 2'd0;
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((data_in_V_data_V_0_ack_out == 1'b1) & (data_in_V_data_V_0_vld_out == 1'b1))) begin
            data_in_V_data_V_0_sel_rd <= ~data_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((data_in_V_data_V_0_ack_in == 1'b1) & (data_in_V_data_V_0_vld_in == 1'b1))) begin
            data_in_V_data_V_0_sel_wr <= ~data_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((data_in_V_data_V_0_vld_in == 1'b0) & (data_in_V_data_V_0_state == 2'd2)) | ((data_in_V_data_V_0_vld_in == 1'b0) & (data_in_V_data_V_0_ack_out == 1'b1) & (data_in_V_data_V_0_state == 2'd3)))) begin
            data_in_V_data_V_0_state <= 2'd2;
        end else if ((((data_in_V_data_V_0_ack_out == 1'b0) & (data_in_V_data_V_0_state == 2'd1)) | ((data_in_V_data_V_0_ack_out == 1'b0) & (data_in_V_data_V_0_vld_in == 1'b1) & (data_in_V_data_V_0_state == 2'd3)))) begin
            data_in_V_data_V_0_state <= 2'd1;
        end else if (((~((data_in_V_data_V_0_vld_in == 1'b0) & (data_in_V_data_V_0_ack_out == 1'b1)) & ~((data_in_V_data_V_0_ack_out == 1'b0) & (data_in_V_data_V_0_vld_in == 1'b1)) & (data_in_V_data_V_0_state == 2'd3)) | ((data_in_V_data_V_0_ack_out == 1'b1) & (data_in_V_data_V_0_state == 2'd1)) | ((data_in_V_data_V_0_vld_in == 1'b1) & (data_in_V_data_V_0_state == 2'd2)))) begin
            data_in_V_data_V_0_state <= 2'd3;
        end else begin
            data_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((data_in_V_last_V_0_ack_out == 1'b1) & (data_in_V_last_V_0_vld_out == 1'b1))) begin
            data_in_V_last_V_0_sel_rd <= ~data_in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((data_in_V_last_V_0_ack_in == 1'b1) & (data_in_V_last_V_0_vld_in == 1'b1))) begin
            data_in_V_last_V_0_sel_wr <= ~data_in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((data_in_V_last_V_0_vld_in == 1'b0) & (data_in_V_last_V_0_state == 2'd2)) | ((data_in_V_last_V_0_vld_in == 1'b0) & (data_in_V_last_V_0_state == 2'd3) & (data_in_V_last_V_0_ack_out == 1'b1)))) begin
            data_in_V_last_V_0_state <= 2'd2;
        end else if ((((data_in_V_last_V_0_ack_out == 1'b0) & (data_in_V_last_V_0_state == 2'd3) & (data_in_V_last_V_0_vld_in == 1'b1)) | ((data_in_V_last_V_0_state == 2'd1) & (data_in_V_last_V_0_ack_out == 1'b0)))) begin
            data_in_V_last_V_0_state <= 2'd1;
        end else if ((((data_in_V_last_V_0_state == 2'd2) & (data_in_V_last_V_0_vld_in == 1'b1)) | (~((data_in_V_last_V_0_vld_in == 1'b0) & (data_in_V_last_V_0_ack_out == 1'b1)) & ~((data_in_V_last_V_0_ack_out == 1'b0) & (data_in_V_last_V_0_vld_in == 1'b1)) & (data_in_V_last_V_0_state == 2'd3)) | ((data_in_V_last_V_0_state == 2'd1) & (data_in_V_last_V_0_ack_out == 1'b1)))) begin
            data_in_V_last_V_0_state <= 2'd3;
        end else begin
            data_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out1_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((data_out1_V_data_V_1_ack_out == 1'b1) & (data_out1_V_data_V_1_vld_out == 1'b1))) begin
            data_out1_V_data_V_1_sel_rd <= ~data_out1_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out1_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((data_out1_V_data_V_1_ack_in == 1'b1) & (data_out1_V_data_V_1_vld_in == 1'b1))) begin
            data_out1_V_data_V_1_sel_wr <= ~data_out1_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out1_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((data_out1_V_data_V_1_vld_in == 1'b0) & (data_out1_V_data_V_1_state == 2'd2)) | ((data_out1_V_data_V_1_vld_in == 1'b0) & (data_out1_V_data_V_1_state == 2'd3) & (data_out1_V_data_V_1_ack_out == 1'b1)))) begin
            data_out1_V_data_V_1_state <= 2'd2;
        end else if ((((data_out1_V_data_V_1_state == 2'd1) & (data_out1_V_data_V_1_ack_out == 1'b0)) | ((data_out1_V_data_V_1_ack_out == 1'b0) & (data_out1_V_data_V_1_state == 2'd3) & (data_out1_V_data_V_1_vld_in == 1'b1)))) begin
            data_out1_V_data_V_1_state <= 2'd1;
        end else if (((~((data_out1_V_data_V_1_vld_in == 1'b0) & (data_out1_V_data_V_1_ack_out == 1'b1)) & ~((data_out1_V_data_V_1_ack_out == 1'b0) & (data_out1_V_data_V_1_vld_in == 1'b1)) & (data_out1_V_data_V_1_state == 2'd3)) | ((data_out1_V_data_V_1_state == 2'd1) & (data_out1_V_data_V_1_ack_out == 1'b1)) | ((data_out1_V_data_V_1_state == 2'd2) & (data_out1_V_data_V_1_vld_in == 1'b1)))) begin
            data_out1_V_data_V_1_state <= 2'd3;
        end else begin
            data_out1_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out1_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((data_out1_V_last_V_1_ack_out == 1'b1) & (data_out1_V_last_V_1_vld_out == 1'b1))) begin
            data_out1_V_last_V_1_sel_rd <= ~data_out1_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out1_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((data_out1_V_last_V_1_ack_in == 1'b1) & (data_out1_V_last_V_1_vld_in == 1'b1))) begin
            data_out1_V_last_V_1_sel_wr <= ~data_out1_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out1_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((data_out1_V_last_V_1_vld_in == 1'b0) & (data_out1_V_last_V_1_state == 2'd2)) | ((data_out1_V_last_V_1_vld_in == 1'b0) & (data_out1_V_last_V_1_state == 2'd3) & (data_out1_V_last_V_1_ack_out == 1'b1)))) begin
            data_out1_V_last_V_1_state <= 2'd2;
        end else if ((((data_out1_V_last_V_1_state == 2'd1) & (data_out1_V_last_V_1_ack_out == 1'b0)) | ((data_out1_V_last_V_1_ack_out == 1'b0) & (data_out1_V_last_V_1_state == 2'd3) & (data_out1_V_last_V_1_vld_in == 1'b1)))) begin
            data_out1_V_last_V_1_state <= 2'd1;
        end else if (((~((data_out1_V_last_V_1_vld_in == 1'b0) & (data_out1_V_last_V_1_ack_out == 1'b1)) & ~((data_out1_V_last_V_1_ack_out == 1'b0) & (data_out1_V_last_V_1_vld_in == 1'b1)) & (data_out1_V_last_V_1_state == 2'd3)) | ((data_out1_V_last_V_1_state == 2'd1) & (data_out1_V_last_V_1_ack_out == 1'b1)) | ((data_out1_V_last_V_1_state == 2'd2) & (data_out1_V_last_V_1_vld_in == 1'b1)))) begin
            data_out1_V_last_V_1_state <= 2'd3;
        end else begin
            data_out1_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out2_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((data_out2_V_data_V_1_ack_out == 1'b1) & (data_out2_V_data_V_1_vld_out == 1'b1))) begin
            data_out2_V_data_V_1_sel_rd <= ~data_out2_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out2_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((data_out2_V_data_V_1_ack_in == 1'b1) & (data_out2_V_data_V_1_vld_in == 1'b1))) begin
            data_out2_V_data_V_1_sel_wr <= ~data_out2_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out2_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((data_out2_V_data_V_1_vld_in == 1'b0) & (data_out2_V_data_V_1_state == 2'd2)) | ((data_out2_V_data_V_1_vld_in == 1'b0) & (data_out2_V_data_V_1_state == 2'd3) & (data_out2_V_data_V_1_ack_out == 1'b1)))) begin
            data_out2_V_data_V_1_state <= 2'd2;
        end else if ((((data_out2_V_data_V_1_state == 2'd1) & (data_out2_V_data_V_1_ack_out == 1'b0)) | ((data_out2_V_data_V_1_ack_out == 1'b0) & (data_out2_V_data_V_1_state == 2'd3) & (data_out2_V_data_V_1_vld_in == 1'b1)))) begin
            data_out2_V_data_V_1_state <= 2'd1;
        end else if (((~((data_out2_V_data_V_1_vld_in == 1'b0) & (data_out2_V_data_V_1_ack_out == 1'b1)) & ~((data_out2_V_data_V_1_ack_out == 1'b0) & (data_out2_V_data_V_1_vld_in == 1'b1)) & (data_out2_V_data_V_1_state == 2'd3)) | ((data_out2_V_data_V_1_state == 2'd1) & (data_out2_V_data_V_1_ack_out == 1'b1)) | ((data_out2_V_data_V_1_state == 2'd2) & (data_out2_V_data_V_1_vld_in == 1'b1)))) begin
            data_out2_V_data_V_1_state <= 2'd3;
        end else begin
            data_out2_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out2_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((data_out2_V_last_V_1_ack_out == 1'b1) & (data_out2_V_last_V_1_vld_out == 1'b1))) begin
            data_out2_V_last_V_1_sel_rd <= ~data_out2_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out2_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((data_out2_V_last_V_1_ack_in == 1'b1) & (data_out2_V_last_V_1_vld_in == 1'b1))) begin
            data_out2_V_last_V_1_sel_wr <= ~data_out2_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out2_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((data_out2_V_last_V_1_vld_in == 1'b0) & (data_out2_V_last_V_1_state == 2'd2)) | ((data_out2_V_last_V_1_vld_in == 1'b0) & (data_out2_V_last_V_1_state == 2'd3) & (data_out2_V_last_V_1_ack_out == 1'b1)))) begin
            data_out2_V_last_V_1_state <= 2'd2;
        end else if ((((data_out2_V_last_V_1_state == 2'd1) & (data_out2_V_last_V_1_ack_out == 1'b0)) | ((data_out2_V_last_V_1_ack_out == 1'b0) & (data_out2_V_last_V_1_state == 2'd3) & (data_out2_V_last_V_1_vld_in == 1'b1)))) begin
            data_out2_V_last_V_1_state <= 2'd1;
        end else if (((~((data_out2_V_last_V_1_vld_in == 1'b0) & (data_out2_V_last_V_1_ack_out == 1'b1)) & ~((data_out2_V_last_V_1_ack_out == 1'b0) & (data_out2_V_last_V_1_vld_in == 1'b1)) & (data_out2_V_last_V_1_state == 2'd3)) | ((data_out2_V_last_V_1_state == 2'd1) & (data_out2_V_last_V_1_ack_out == 1'b1)) | ((data_out2_V_last_V_1_state == 2'd2) & (data_out2_V_last_V_1_vld_in == 1'b1)))) begin
            data_out2_V_last_V_1_state <= 2'd3;
        end else begin
            data_out2_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((data_in_V_data_V_0_load_A == 1'b1)) begin
        data_in_V_data_V_0_payload_A <= data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((data_in_V_data_V_0_load_B == 1'b1)) begin
        data_in_V_data_V_0_payload_B <= data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((data_in_V_last_V_0_load_A == 1'b1)) begin
        data_in_V_last_V_0_payload_A <= data_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((data_in_V_last_V_0_load_B == 1'b1)) begin
        data_in_V_last_V_0_payload_B <= data_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out1_V_data_V_1_load_A == 1'b1)) begin
        data_out1_V_data_V_1_payload_A <= data_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out1_V_data_V_1_load_B == 1'b1)) begin
        data_out1_V_data_V_1_payload_B <= data_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out1_V_last_V_1_load_A == 1'b1)) begin
        data_out1_V_last_V_1_payload_A <= data_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out1_V_last_V_1_load_B == 1'b1)) begin
        data_out1_V_last_V_1_payload_B <= data_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out2_V_data_V_1_load_A == 1'b1)) begin
        data_out2_V_data_V_1_payload_A <= data_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out2_V_data_V_1_load_B == 1'b1)) begin
        data_out2_V_data_V_1_payload_B <= data_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out2_V_last_V_1_load_A == 1'b1)) begin
        data_out2_V_last_V_1_payload_A <= data_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out2_V_last_V_1_load_B == 1'b1)) begin
        data_out2_V_last_V_1_payload_B <= data_in_V_last_V_0_data_out;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter0_fsm_state1)) begin
        data_in_TDATA_blk_n = data_in_V_data_V_0_state[1'd0];
    end else begin
        data_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((data_in_V_data_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state1_io) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((data_out2_V_last_V_1_ack_in == 1'b0) | (data_out2_V_data_V_1_ack_in == 1'b0) | (data_out1_V_last_V_1_ack_in == 1'b0) | (data_out1_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        data_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        data_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((data_in_V_data_V_0_sel == 1'b1)) begin
        data_in_V_data_V_0_data_out = data_in_V_data_V_0_payload_B;
    end else begin
        data_in_V_data_V_0_data_out = data_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((data_in_V_data_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state1_io) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((data_out2_V_last_V_1_ack_in == 1'b0) | (data_out2_V_data_V_1_ack_in == 1'b0) | (data_out1_V_last_V_1_ack_in == 1'b0) | (data_out1_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        data_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        data_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((data_in_V_last_V_0_sel == 1'b1)) begin
        data_in_V_last_V_0_data_out = data_in_V_last_V_0_payload_B;
    end else begin
        data_in_V_last_V_0_data_out = data_in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) | (1'b1 == ap_CS_iter0_fsm_state1))) begin
        data_out1_TDATA_blk_n = data_out1_V_data_V_1_state[1'd1];
    end else begin
        data_out1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((data_out1_V_data_V_1_sel == 1'b1)) begin
        data_out1_V_data_V_1_data_out = data_out1_V_data_V_1_payload_B;
    end else begin
        data_out1_V_data_V_1_data_out = data_out1_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((data_in_V_data_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state1_io) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((data_out2_V_last_V_1_ack_in == 1'b0) | (data_out2_V_data_V_1_ack_in == 1'b0) | (data_out1_V_last_V_1_ack_in == 1'b0) | (data_out1_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        data_out1_V_data_V_1_vld_in = 1'b1;
    end else begin
        data_out1_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((data_out1_V_last_V_1_sel == 1'b1)) begin
        data_out1_V_last_V_1_data_out = data_out1_V_last_V_1_payload_B;
    end else begin
        data_out1_V_last_V_1_data_out = data_out1_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((data_in_V_data_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state1_io) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((data_out2_V_last_V_1_ack_in == 1'b0) | (data_out2_V_data_V_1_ack_in == 1'b0) | (data_out1_V_last_V_1_ack_in == 1'b0) | (data_out1_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        data_out1_V_last_V_1_vld_in = 1'b1;
    end else begin
        data_out1_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter1_fsm_state2) | (1'b1 == ap_CS_iter0_fsm_state1))) begin
        data_out2_TDATA_blk_n = data_out2_V_data_V_1_state[1'd1];
    end else begin
        data_out2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((data_out2_V_data_V_1_sel == 1'b1)) begin
        data_out2_V_data_V_1_data_out = data_out2_V_data_V_1_payload_B;
    end else begin
        data_out2_V_data_V_1_data_out = data_out2_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((data_in_V_data_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state1_io) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((data_out2_V_last_V_1_ack_in == 1'b0) | (data_out2_V_data_V_1_ack_in == 1'b0) | (data_out1_V_last_V_1_ack_in == 1'b0) | (data_out1_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        data_out2_V_data_V_1_vld_in = 1'b1;
    end else begin
        data_out2_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((data_out2_V_last_V_1_sel == 1'b1)) begin
        data_out2_V_last_V_1_data_out = data_out2_V_last_V_1_payload_B;
    end else begin
        data_out2_V_last_V_1_data_out = data_out2_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((data_in_V_data_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state1_io) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((data_out2_V_last_V_1_ack_in == 1'b0) | (data_out2_V_data_V_1_ack_in == 1'b0) | (data_out1_V_last_V_1_ack_in == 1'b0) | (data_out1_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        data_out2_V_last_V_1_vld_in = 1'b1;
    end else begin
        data_out2_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((data_out2_V_last_V_1_ack_in == 1'b0) | (data_out2_V_data_V_1_ack_in == 1'b0) | (data_out1_V_last_V_1_ack_in == 1'b0) | (data_out1_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & ~((data_in_V_data_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((data_out2_V_last_V_1_ack_in == 1'b0) | (data_out2_V_data_V_1_ack_in == 1'b0) | (data_out1_V_last_V_1_ack_in == 1'b0) | (data_out1_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & ((data_in_V_data_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state1_io)))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~((data_in_V_data_V_0_vld_out == 1'b0) | (1'b1 == ap_block_state1_io) | ((1'b1 == ap_CS_iter1_fsm_state2) & ((data_out2_V_last_V_1_ack_in == 1'b0) | (data_out2_V_data_V_1_ack_in == 1'b0) | (data_out1_V_last_V_1_ack_in == 1'b0) | (data_out1_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

always @ (*) begin
    ap_block_state1_io = ((data_out2_V_data_V_1_ack_in == 1'b0) | (data_out1_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (data_in_V_data_V_0_vld_out == 1'b0);
end

always @ (*) begin
    ap_block_state2_io = ((data_out2_V_data_V_1_ack_in == 1'b0) | (data_out1_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((data_out2_V_last_V_1_ack_in == 1'b0) | (data_out2_V_data_V_1_ack_in == 1'b0) | (data_out1_V_last_V_1_ack_in == 1'b0) | (data_out1_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_in_TREADY = data_in_V_last_V_0_state[1'd1];

assign data_in_V_data_V_0_ack_in = data_in_V_data_V_0_state[1'd1];

assign data_in_V_data_V_0_load_A = (~data_in_V_data_V_0_sel_wr & data_in_V_data_V_0_state_cmp_full);

assign data_in_V_data_V_0_load_B = (data_in_V_data_V_0_state_cmp_full & data_in_V_data_V_0_sel_wr);

assign data_in_V_data_V_0_sel = data_in_V_data_V_0_sel_rd;

assign data_in_V_data_V_0_state_cmp_full = ((data_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign data_in_V_data_V_0_vld_in = data_in_TVALID;

assign data_in_V_data_V_0_vld_out = data_in_V_data_V_0_state[1'd0];

assign data_in_V_last_V_0_ack_in = data_in_V_last_V_0_state[1'd1];

assign data_in_V_last_V_0_load_A = (~data_in_V_last_V_0_sel_wr & data_in_V_last_V_0_state_cmp_full);

assign data_in_V_last_V_0_load_B = (data_in_V_last_V_0_state_cmp_full & data_in_V_last_V_0_sel_wr);

assign data_in_V_last_V_0_sel = data_in_V_last_V_0_sel_rd;

assign data_in_V_last_V_0_state_cmp_full = ((data_in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign data_in_V_last_V_0_vld_in = data_in_TVALID;

assign data_in_V_last_V_0_vld_out = data_in_V_last_V_0_state[1'd0];

assign data_out1_TDATA = data_out1_V_data_V_1_data_out;

assign data_out1_TLAST = data_out1_V_last_V_1_data_out;

assign data_out1_TVALID = data_out1_V_last_V_1_state[1'd0];

assign data_out1_V_data_V_1_ack_in = data_out1_V_data_V_1_state[1'd1];

assign data_out1_V_data_V_1_ack_out = data_out1_TREADY;

assign data_out1_V_data_V_1_load_A = (~data_out1_V_data_V_1_sel_wr & data_out1_V_data_V_1_state_cmp_full);

assign data_out1_V_data_V_1_load_B = (data_out1_V_data_V_1_state_cmp_full & data_out1_V_data_V_1_sel_wr);

assign data_out1_V_data_V_1_sel = data_out1_V_data_V_1_sel_rd;

assign data_out1_V_data_V_1_state_cmp_full = ((data_out1_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign data_out1_V_data_V_1_vld_out = data_out1_V_data_V_1_state[1'd0];

assign data_out1_V_last_V_1_ack_in = data_out1_V_last_V_1_state[1'd1];

assign data_out1_V_last_V_1_ack_out = data_out1_TREADY;

assign data_out1_V_last_V_1_load_A = (~data_out1_V_last_V_1_sel_wr & data_out1_V_last_V_1_state_cmp_full);

assign data_out1_V_last_V_1_load_B = (data_out1_V_last_V_1_state_cmp_full & data_out1_V_last_V_1_sel_wr);

assign data_out1_V_last_V_1_sel = data_out1_V_last_V_1_sel_rd;

assign data_out1_V_last_V_1_state_cmp_full = ((data_out1_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign data_out1_V_last_V_1_vld_out = data_out1_V_last_V_1_state[1'd0];

assign data_out2_TDATA = data_out2_V_data_V_1_data_out;

assign data_out2_TLAST = data_out2_V_last_V_1_data_out;

assign data_out2_TVALID = data_out2_V_last_V_1_state[1'd0];

assign data_out2_V_data_V_1_ack_in = data_out2_V_data_V_1_state[1'd1];

assign data_out2_V_data_V_1_ack_out = data_out2_TREADY;

assign data_out2_V_data_V_1_load_A = (~data_out2_V_data_V_1_sel_wr & data_out2_V_data_V_1_state_cmp_full);

assign data_out2_V_data_V_1_load_B = (data_out2_V_data_V_1_state_cmp_full & data_out2_V_data_V_1_sel_wr);

assign data_out2_V_data_V_1_sel = data_out2_V_data_V_1_sel_rd;

assign data_out2_V_data_V_1_state_cmp_full = ((data_out2_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign data_out2_V_data_V_1_vld_out = data_out2_V_data_V_1_state[1'd0];

assign data_out2_V_last_V_1_ack_in = data_out2_V_last_V_1_state[1'd1];

assign data_out2_V_last_V_1_ack_out = data_out2_TREADY;

assign data_out2_V_last_V_1_load_A = (~data_out2_V_last_V_1_sel_wr & data_out2_V_last_V_1_state_cmp_full);

assign data_out2_V_last_V_1_load_B = (data_out2_V_last_V_1_state_cmp_full & data_out2_V_last_V_1_sel_wr);

assign data_out2_V_last_V_1_sel = data_out2_V_last_V_1_sel_rd;

assign data_out2_V_last_V_1_state_cmp_full = ((data_out2_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign data_out2_V_last_V_1_vld_out = data_out2_V_last_V_1_state[1'd0];

endmodule //axis_copy_stream
