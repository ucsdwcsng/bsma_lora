// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ratio_counter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V,
        ratio_V,
        total_n_V,
        count_ratio_trig_V,
        count_ratio_trig_V_ap_vld,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] input_V;
input  [9:0] ratio_V;
input  [9:0] total_n_V;
output  [0:0] count_ratio_trig_V;
output   count_ratio_trig_V_ap_vld;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] count_ratio_trig_V;
reg count_ratio_trig_V_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] internal_state_V;
reg   [9:0] counter_idx_V;
reg   [9:0] internal_ratio_count;
reg   [0:0] ap_phi_mux_counter_idx_V_new_phi_fu_47_p4;
wire   [0:0] internal_state_V_loa_load_fu_105_p1;
wire   [0:0] input_V_read_read_fu_38_p2;
reg   [0:0] ap_phi_mux_counter_idx_V_flag_2_phi_fu_58_p6;
wire   [0:0] tmp_1_fu_123_p2;
wire   [9:0] counter_idx_V_new_ca_fu_117_p1;
reg   [9:0] ap_phi_mux_counter_idx_V_new_2_phi_fu_72_p6;
wire   [9:0] tmp_2_fu_153_p2;
reg   [9:0] ap_phi_mux_internal_ratio_count_2_phi_fu_84_p6;
wire   [9:0] tmp_4_fu_164_p2;
wire   [0:0] rev4_fu_135_p2;
wire   [0:0] ult_fu_129_p2;
wire   [9:0] tmp_3_fu_160_p1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 internal_state_V = 1'd0;
#0 counter_idx_V = 10'd0;
#0 internal_ratio_count = 10'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (internal_state_V_loa_load_fu_105_p1 == 1'd1) & (tmp_1_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_state_V <= 1'd0;
    end else if ((((ap_start == 1'b1) & (1'b1 == ap_ce) & (tmp_1_fu_123_p2 == 1'd1) & (internal_state_V_loa_load_fu_105_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (input_V_read_read_fu_38_p2 == 1'd1) & (internal_state_V_loa_load_fu_105_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        internal_state_V <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (ap_phi_mux_counter_idx_V_flag_2_phi_fu_58_p6 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        counter_idx_V <= ap_phi_mux_counter_idx_V_new_2_phi_fu_72_p6;
        internal_ratio_count <= ap_phi_mux_internal_ratio_count_2_phi_fu_84_p6;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((internal_state_V_loa_load_fu_105_p1 == 1'd1) & (tmp_1_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_counter_idx_V_flag_2_phi_fu_58_p6 = 1'd0;
    end else if ((((tmp_1_fu_123_p2 == 1'd1) & (internal_state_V_loa_load_fu_105_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((internal_state_V_loa_load_fu_105_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_counter_idx_V_flag_2_phi_fu_58_p6 = 1'd1;
    end else begin
        ap_phi_mux_counter_idx_V_flag_2_phi_fu_58_p6 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((tmp_1_fu_123_p2 == 1'd1) & (internal_state_V_loa_load_fu_105_p1 == 1'd1))) begin
            ap_phi_mux_counter_idx_V_new_2_phi_fu_72_p6 = tmp_2_fu_153_p2;
        end else if ((internal_state_V_loa_load_fu_105_p1 == 1'd0)) begin
            ap_phi_mux_counter_idx_V_new_2_phi_fu_72_p6 = counter_idx_V_new_ca_fu_117_p1;
        end else begin
            ap_phi_mux_counter_idx_V_new_2_phi_fu_72_p6 = 'bx;
        end
    end else begin
        ap_phi_mux_counter_idx_V_new_2_phi_fu_72_p6 = 'bx;
    end
end

always @ (*) begin
    if (((internal_state_V_loa_load_fu_105_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((input_V_read_read_fu_38_p2 == 1'd0)) begin
            ap_phi_mux_counter_idx_V_new_phi_fu_47_p4 = 1'd0;
        end else if ((input_V_read_read_fu_38_p2 == 1'd1)) begin
            ap_phi_mux_counter_idx_V_new_phi_fu_47_p4 = 1'd1;
        end else begin
            ap_phi_mux_counter_idx_V_new_phi_fu_47_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_counter_idx_V_new_phi_fu_47_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((tmp_1_fu_123_p2 == 1'd1) & (internal_state_V_loa_load_fu_105_p1 == 1'd1))) begin
            ap_phi_mux_internal_ratio_count_2_phi_fu_84_p6 = tmp_4_fu_164_p2;
        end else if ((internal_state_V_loa_load_fu_105_p1 == 1'd0)) begin
            ap_phi_mux_internal_ratio_count_2_phi_fu_84_p6 = counter_idx_V_new_ca_fu_117_p1;
        end else begin
            ap_phi_mux_internal_ratio_count_2_phi_fu_84_p6 = 'bx;
        end
    end else begin
        ap_phi_mux_internal_ratio_count_2_phi_fu_84_p6 = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (internal_state_V_loa_load_fu_105_p1 == 1'd1) & (tmp_1_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        count_ratio_trig_V = rev4_fu_135_p2;
    end else if ((((ap_start == 1'b1) & (1'b1 == ap_ce) & (tmp_1_fu_123_p2 == 1'd1) & (internal_state_V_loa_load_fu_105_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (internal_state_V_loa_load_fu_105_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        count_ratio_trig_V = 1'd0;
    end else begin
        count_ratio_trig_V = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (1'b1 == ap_ce) & (internal_state_V_loa_load_fu_105_p1 == 1'd1) & (tmp_1_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (tmp_1_fu_123_p2 == 1'd1) & (internal_state_V_loa_load_fu_105_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (internal_state_V_loa_load_fu_105_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        count_ratio_trig_V_ap_vld = 1'b1;
    end else begin
        count_ratio_trig_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign counter_idx_V_new_ca_fu_117_p1 = ap_phi_mux_counter_idx_V_new_phi_fu_47_p4;

assign input_V_read_read_fu_38_p2 = input_V;

assign internal_state_V_loa_load_fu_105_p1 = internal_state_V;

assign rev4_fu_135_p2 = (ult_fu_129_p2 ^ 1'd1);

assign tmp_1_fu_123_p2 = ((counter_idx_V < total_n_V) ? 1'b1 : 1'b0);

assign tmp_2_fu_153_p2 = (counter_idx_V + 10'd1);

assign tmp_3_fu_160_p1 = input_V;

assign tmp_4_fu_164_p2 = (internal_ratio_count + tmp_3_fu_160_p1);

assign ult_fu_129_p2 = ((internal_ratio_count < ratio_V) ? 1'b1 : 1'b0);

endmodule //ratio_counter
