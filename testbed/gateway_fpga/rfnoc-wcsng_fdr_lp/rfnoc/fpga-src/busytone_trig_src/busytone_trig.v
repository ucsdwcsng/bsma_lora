// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="busytone_trig,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k325tffg900-3,HLS_INPUT_CLOCK=4.650000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.254500,HLS_SYN_LAT=2,HLS_SYN_TPT=3,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=413,HLS_SYN_LUT=487,HLS_VERSION=2018_3}" *)

module busytone_trig (
        ap_clk,
        ap_rst_n,
        data_in_TDATA,
        data_in_TVALID,
        data_in_TREADY,
        data_in_TLAST,
        data_out_TDATA,
        data_out_TVALID,
        data_out_TREADY,
        data_out_TLAST,
        param1_V,
        param2_V,
        src_sid_V
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input  [31:0] data_in_TDATA;
input   data_in_TVALID;
output   data_in_TREADY;
input  [0:0] data_in_TLAST;
output  [63:0] data_out_TDATA;
output   data_out_TVALID;
input   data_out_TREADY;
output  [0:0] data_out_TLAST;
input  [31:0] param1_V;
input  [31:0] param2_V;
input  [15:0] src_sid_V;

 reg    ap_rst_n_inv;
reg   [31:0] data_in_V_data_0_data_out;
wire    data_in_V_data_0_vld_in;
wire    data_in_V_data_0_vld_out;
wire    data_in_V_data_0_ack_in;
reg    data_in_V_data_0_ack_out;
reg   [31:0] data_in_V_data_0_payload_A;
reg   [31:0] data_in_V_data_0_payload_B;
reg    data_in_V_data_0_sel_rd;
reg    data_in_V_data_0_sel_wr;
wire    data_in_V_data_0_sel;
wire    data_in_V_data_0_load_A;
wire    data_in_V_data_0_load_B;
reg   [1:0] data_in_V_data_0_state;
wire    data_in_V_data_0_state_cmp_full;
wire    data_in_V_last_V_0_vld_in;
reg    data_in_V_last_V_0_ack_out;
reg   [1:0] data_in_V_last_V_0_state;
reg   [63:0] data_out_V_data_V_1_data_in;
reg   [63:0] data_out_V_data_V_1_data_out;
reg    data_out_V_data_V_1_vld_in;
wire    data_out_V_data_V_1_vld_out;
wire    data_out_V_data_V_1_ack_in;
wire    data_out_V_data_V_1_ack_out;
reg   [63:0] data_out_V_data_V_1_payload_A;
reg   [63:0] data_out_V_data_V_1_payload_B;
reg    data_out_V_data_V_1_sel_rd;
reg    data_out_V_data_V_1_sel_wr;
wire    data_out_V_data_V_1_sel;
wire    data_out_V_data_V_1_load_A;
wire    data_out_V_data_V_1_load_B;
reg   [1:0] data_out_V_data_V_1_state;
wire    data_out_V_data_V_1_state_cmp_full;
reg   [0:0] data_out_V_last_V_1_data_in;
reg   [0:0] data_out_V_last_V_1_data_out;
reg    data_out_V_last_V_1_vld_in;
wire    data_out_V_last_V_1_vld_out;
wire    data_out_V_last_V_1_ack_in;
wire    data_out_V_last_V_1_ack_out;
reg   [0:0] data_out_V_last_V_1_payload_A;
reg   [0:0] data_out_V_last_V_1_payload_B;
reg    data_out_V_last_V_1_sel_rd;
reg    data_out_V_last_V_1_sel_wr;
wire    data_out_V_last_V_1_sel;
wire    data_out_V_last_V_1_load_A;
wire    data_out_V_last_V_1_load_B;
reg   [1:0] data_out_V_last_V_1_state;
wire    data_out_V_last_V_1_state_cmp_full;
reg   [2:0] state_var_V;
reg   [11:0] seq_num_V;
reg   [19:0] cooldown_10x;
reg   [0:0] count_ratio_trig_V;
reg   [31:0] cooldown_cnt;
reg    data_in_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] state_var_V_load_load_fu_190_p1;
wire    ap_CS_fsm_state2;
reg   [2:0] state_var_V_load_reg_361;
reg    data_out_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg   [15:0] src_sid_V_read_reg_356;
reg    ap_block_state1;
reg   [11:0] seq_num_V_load_reg_365;
wire   [31:0] extLd_fu_202_p1;
reg   [31:0] extLd_reg_371;
wire   [7:0] tmp_2_fu_206_p1;
reg   [7:0] tmp_2_reg_376;
reg   [15:0] p_Result_2_reg_381;
wire   [0:0] tmp_6_fu_252_p2;
reg   [0:0] tmp_6_reg_386;
reg   [9:0] p_Result_s_reg_390;
reg   [9:0] p_Result_1_reg_395;
wire   [31:0] tmp_7_fu_287_p2;
reg    ap_block_state2;
reg    ap_block_state2_io;
wire   [0:0] tmp_1_fu_282_p2;
wire   [63:0] p_Result_3_fu_293_p4;
wire   [63:0] p_Result_s_4_fu_314_p6;
reg    grp_ratio_counter_fu_161_ap_start;
wire    grp_ratio_counter_fu_161_ap_done;
wire    grp_ratio_counter_fu_161_ap_idle;
wire    grp_ratio_counter_fu_161_ap_ready;
reg   [0:0] grp_ratio_counter_fu_161_input_V;
wire   [0:0] grp_ratio_counter_fu_161_count_ratio_trig_V;
wire    grp_ratio_counter_fu_161_count_ratio_trig_V_ap_vld;
reg    grp_ratio_counter_fu_161_ap_ce;
reg    ap_predicate_op53_call_state2;
reg    ap_predicate_op54_call_state2;
reg    ap_block_state2_ignore_call0;
reg   [31:0] storemerge_reg_150;
wire   [2:0] storemerge1_cast_cas_fu_336_p3;
reg    ap_block_state3;
reg    ap_block_state3_io;
wire   [11:0] tmp_9_fu_303_p2;
wire   [19:0] tmp_s_fu_214_p3;
wire   [11:0] tmp_3_fu_210_p1;
wire   [15:0] tmp_fu_248_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_condition_441;
reg    ap_condition_438;

// power-on initialization
initial begin
#0 data_in_V_data_0_sel_rd = 1'b0;
#0 data_in_V_data_0_sel_wr = 1'b0;
#0 data_in_V_data_0_state = 2'd0;
#0 data_in_V_last_V_0_state = 2'd0;
#0 data_out_V_data_V_1_sel_rd = 1'b0;
#0 data_out_V_data_V_1_sel_wr = 1'b0;
#0 data_out_V_data_V_1_state = 2'd0;
#0 data_out_V_last_V_1_sel_rd = 1'b0;
#0 data_out_V_last_V_1_sel_wr = 1'b0;
#0 data_out_V_last_V_1_state = 2'd0;
#0 state_var_V = 3'd0;
#0 seq_num_V = 12'd0;
#0 cooldown_10x = 20'd0;
#0 count_ratio_trig_V = 1'd0;
#0 cooldown_cnt = 32'd0;
#0 ap_CS_fsm = 3'd1;
end

ratio_counter grp_ratio_counter_fu_161(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_ratio_counter_fu_161_ap_start),
    .ap_done(grp_ratio_counter_fu_161_ap_done),
    .ap_idle(grp_ratio_counter_fu_161_ap_idle),
    .ap_ready(grp_ratio_counter_fu_161_ap_ready),
    .input_V(grp_ratio_counter_fu_161_input_V),
    .ratio_V(p_Result_s_reg_390),
    .total_n_V(p_Result_1_reg_395),
    .count_ratio_trig_V(grp_ratio_counter_fu_161_count_ratio_trig_V),
    .count_ratio_trig_V_ap_vld(grp_ratio_counter_fu_161_count_ratio_trig_V_ap_vld),
    .ap_ce(grp_ratio_counter_fu_161_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_in_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((data_in_V_data_0_ack_out == 1'b1) & (data_in_V_data_0_vld_out == 1'b1))) begin
            data_in_V_data_0_sel_rd <= ~data_in_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_in_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((data_in_V_data_0_ack_in == 1'b1) & (data_in_V_data_0_vld_in == 1'b1))) begin
            data_in_V_data_0_sel_wr <= ~data_in_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_in_V_data_0_state <= 2'd0;
    end else begin
        if ((((data_in_V_data_0_vld_in == 1'b0) & (data_in_V_data_0_state == 2'd2)) | ((data_in_V_data_0_vld_in == 1'b0) & (data_in_V_data_0_state == 2'd3) & (data_in_V_data_0_ack_out == 1'b1)))) begin
            data_in_V_data_0_state <= 2'd2;
        end else if ((((data_in_V_data_0_ack_out == 1'b0) & (data_in_V_data_0_state == 2'd1)) | ((data_in_V_data_0_ack_out == 1'b0) & (data_in_V_data_0_state == 2'd3) & (data_in_V_data_0_vld_in == 1'b1)))) begin
            data_in_V_data_0_state <= 2'd1;
        end else if (((~((data_in_V_data_0_vld_in == 1'b0) & (data_in_V_data_0_ack_out == 1'b1)) & ~((data_in_V_data_0_ack_out == 1'b0) & (data_in_V_data_0_vld_in == 1'b1)) & (data_in_V_data_0_state == 2'd3)) | ((data_in_V_data_0_state == 2'd1) & (data_in_V_data_0_ack_out == 1'b1)) | ((data_in_V_data_0_state == 2'd2) & (data_in_V_data_0_vld_in == 1'b1)))) begin
            data_in_V_data_0_state <= 2'd3;
        end else begin
            data_in_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((data_in_V_last_V_0_state == 2'd2) & (data_in_V_last_V_0_vld_in == 1'b0)) | ((data_in_V_last_V_0_state == 2'd3) & (data_in_V_last_V_0_vld_in == 1'b0) & (data_in_V_last_V_0_ack_out == 1'b1)))) begin
            data_in_V_last_V_0_state <= 2'd2;
        end else if ((((data_in_V_last_V_0_state == 2'd3) & (data_in_V_last_V_0_ack_out == 1'b0) & (data_in_V_last_V_0_vld_in == 1'b1)) | ((data_in_V_last_V_0_state == 2'd1) & (data_in_V_last_V_0_ack_out == 1'b0)))) begin
            data_in_V_last_V_0_state <= 2'd1;
        end else if ((((data_in_V_last_V_0_state == 2'd2) & (data_in_V_last_V_0_vld_in == 1'b1)) | (~((data_in_V_last_V_0_vld_in == 1'b0) & (data_in_V_last_V_0_ack_out == 1'b1)) & ~((data_in_V_last_V_0_ack_out == 1'b0) & (data_in_V_last_V_0_vld_in == 1'b1)) & (data_in_V_last_V_0_state == 2'd3)) | ((data_in_V_last_V_0_state == 2'd1) & (data_in_V_last_V_0_ack_out == 1'b1)))) begin
            data_in_V_last_V_0_state <= 2'd3;
        end else begin
            data_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((data_out_V_data_V_1_ack_out == 1'b1) & (data_out_V_data_V_1_vld_out == 1'b1))) begin
            data_out_V_data_V_1_sel_rd <= ~data_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((data_out_V_data_V_1_ack_in == 1'b1) & (data_out_V_data_V_1_vld_in == 1'b1))) begin
            data_out_V_data_V_1_sel_wr <= ~data_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((data_out_V_data_V_1_state == 2'd2) & (data_out_V_data_V_1_vld_in == 1'b0)) | ((data_out_V_data_V_1_state == 2'd3) & (data_out_V_data_V_1_vld_in == 1'b0) & (data_out_V_data_V_1_ack_out == 1'b1)))) begin
            data_out_V_data_V_1_state <= 2'd2;
        end else if ((((data_out_V_data_V_1_state == 2'd1) & (data_out_V_data_V_1_ack_out == 1'b0)) | ((data_out_V_data_V_1_state == 2'd3) & (data_out_V_data_V_1_ack_out == 1'b0) & (data_out_V_data_V_1_vld_in == 1'b1)))) begin
            data_out_V_data_V_1_state <= 2'd1;
        end else if (((~((data_out_V_data_V_1_vld_in == 1'b0) & (data_out_V_data_V_1_ack_out == 1'b1)) & ~((data_out_V_data_V_1_ack_out == 1'b0) & (data_out_V_data_V_1_vld_in == 1'b1)) & (data_out_V_data_V_1_state == 2'd3)) | ((data_out_V_data_V_1_state == 2'd1) & (data_out_V_data_V_1_ack_out == 1'b1)) | ((data_out_V_data_V_1_state == 2'd2) & (data_out_V_data_V_1_vld_in == 1'b1)))) begin
            data_out_V_data_V_1_state <= 2'd3;
        end else begin
            data_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((data_out_V_last_V_1_ack_out == 1'b1) & (data_out_V_last_V_1_vld_out == 1'b1))) begin
            data_out_V_last_V_1_sel_rd <= ~data_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((data_out_V_last_V_1_ack_in == 1'b1) & (data_out_V_last_V_1_vld_in == 1'b1))) begin
            data_out_V_last_V_1_sel_wr <= ~data_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((data_out_V_last_V_1_state == 2'd2) & (data_out_V_last_V_1_vld_in == 1'b0)) | ((data_out_V_last_V_1_state == 2'd3) & (data_out_V_last_V_1_vld_in == 1'b0) & (data_out_V_last_V_1_ack_out == 1'b1)))) begin
            data_out_V_last_V_1_state <= 2'd2;
        end else if ((((data_out_V_last_V_1_state == 2'd1) & (data_out_V_last_V_1_ack_out == 1'b0)) | ((data_out_V_last_V_1_state == 2'd3) & (data_out_V_last_V_1_ack_out == 1'b0) & (data_out_V_last_V_1_vld_in == 1'b1)))) begin
            data_out_V_last_V_1_state <= 2'd1;
        end else if (((~((data_out_V_last_V_1_vld_in == 1'b0) & (data_out_V_last_V_1_ack_out == 1'b1)) & ~((data_out_V_last_V_1_ack_out == 1'b0) & (data_out_V_last_V_1_vld_in == 1'b1)) & (data_out_V_last_V_1_state == 2'd3)) | ((data_out_V_last_V_1_state == 2'd1) & (data_out_V_last_V_1_ack_out == 1'b1)) | ((data_out_V_last_V_1_state == 2'd2) & (data_out_V_last_V_1_vld_in == 1'b1)))) begin
            data_out_V_last_V_1_state <= 2'd3;
        end else begin
            data_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_out_V_last_V_1_ack_in == 1'b0) | (data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io)) & (1'b1 == ap_CS_fsm_state3) & ((state_var_V_load_reg_361 == 3'd5) | ((state_var_V_load_reg_361 == 3'd6) | (state_var_V_load_reg_361 == 3'd7))))) begin
        state_var_V <= 3'd0;
    end else if ((~((data_out_V_last_V_1_ack_in == 1'b0) | (data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io)) & (state_var_V_load_reg_361 == 3'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        state_var_V <= storemerge1_cast_cas_fu_336_p3;
    end else if (((~((data_out_V_last_V_1_ack_in == 1'b0) | (data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io)) & (state_var_V_load_reg_361 == 3'd0) & (1'b1 == ap_CS_fsm_state3)) | (~((1'b1 == ap_block_state2_io) | ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2))) & (tmp_1_fu_282_p2 == 1'd0) & (state_var_V_load_reg_361 == 3'd2) & (1'b1 == ap_CS_fsm_state2)))) begin
        state_var_V <= 3'd1;
    end else if ((~((data_in_V_data_0_vld_out == 1'b0) & (state_var_V == 3'd1)) & (state_var_V_load_load_fu_190_p1 == 3'd3) & (1'b1 == ap_CS_fsm_state1))) begin
        state_var_V <= 3'd4;
    end else if (((~((1'b1 == ap_block_state2_io) | ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2))) & (tmp_1_fu_282_p2 == 1'd1) & (state_var_V_load_reg_361 == 3'd2) & (1'b1 == ap_CS_fsm_state2)) | (~((data_in_V_data_0_vld_out == 1'b0) & (state_var_V == 3'd1)) & (state_var_V_load_load_fu_190_p1 == 3'd4) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_var_V <= 3'd2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_438)) begin
        if ((tmp_1_fu_282_p2 == 1'd0)) begin
            storemerge_reg_150 <= 32'd0;
        end else if ((tmp_1_fu_282_p2 == 1'd1)) begin
            storemerge_reg_150 <= tmp_7_fu_287_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_in_V_data_0_vld_out == 1'b0) & (state_var_V == 3'd1)) & (state_var_V_load_load_fu_190_p1 == 3'd4) & (1'b1 == ap_CS_fsm_state1))) begin
        cooldown_10x[19 : 8] <= tmp_s_fu_214_p3[19 : 8];
        tmp_2_reg_376 <= tmp_2_fu_206_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_out_V_last_V_1_ack_in == 1'b0) | (data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io)) & (state_var_V_load_reg_361 == 3'd2) & (1'b1 == ap_CS_fsm_state3))) begin
        cooldown_cnt <= storemerge_reg_150;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_predicate_op54_call_state2 == 1'b1) & (grp_ratio_counter_fu_161_count_ratio_trig_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_predicate_op53_call_state2 == 1'b1) & (grp_ratio_counter_fu_161_count_ratio_trig_V_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        count_ratio_trig_V <= grp_ratio_counter_fu_161_count_ratio_trig_V;
    end
end

always @ (posedge ap_clk) begin
    if ((data_in_V_data_0_load_A == 1'b1)) begin
        data_in_V_data_0_payload_A <= data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((data_in_V_data_0_load_B == 1'b1)) begin
        data_in_V_data_0_payload_B <= data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_data_V_1_load_A == 1'b1)) begin
        data_out_V_data_V_1_payload_A <= data_out_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_data_V_1_load_B == 1'b1)) begin
        data_out_V_data_V_1_payload_B <= data_out_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_last_V_1_load_A == 1'b1)) begin
        data_out_V_last_V_1_payload_A <= data_out_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_last_V_1_load_B == 1'b1)) begin
        data_out_V_last_V_1_payload_B <= data_out_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_in_V_data_0_vld_out == 1'b0) & (state_var_V == 3'd1)) & (1'b1 == ap_CS_fsm_state1))) begin
        extLd_reg_371[19 : 8] <= extLd_fu_202_p1[19 : 8];
        seq_num_V_load_reg_365 <= seq_num_V;
        src_sid_V_read_reg_356 <= src_sid_V;
        state_var_V_load_reg_361 <= state_var_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_in_V_data_0_vld_out == 1'b0) & (state_var_V == 3'd1)) & (state_var_V == 3'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Result_1_reg_395 <= {{param1_V[21:12]}};
        p_Result_s_reg_390 <= {{param1_V[31:22]}};
        tmp_6_reg_386 <= tmp_6_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_in_V_data_0_vld_out == 1'b0) & (state_var_V == 3'd1)) & (state_var_V_load_load_fu_190_p1 == 3'd3) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Result_2_reg_381 <= {{param2_V[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2))) & (state_var_V_load_reg_361 == 3'd4) & (1'b1 == ap_CS_fsm_state2))) begin
        seq_num_V <= tmp_9_fu_303_p2;
    end
end

always @ (*) begin
    if ((((state_var_V_load_reg_361 == 3'd2) & (1'b1 == ap_CS_fsm_state2)) | ((state_var_V == 3'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        data_in_TDATA_blk_n = data_in_V_data_0_state[1'd0];
    end else begin
        data_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state2_io) | ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2))) & (state_var_V_load_reg_361 == 3'd2) & (1'b1 == ap_CS_fsm_state2)) | (~((data_in_V_data_0_vld_out == 1'b0) & (state_var_V == 3'd1)) & (state_var_V == 3'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        data_in_V_data_0_ack_out = 1'b1;
    end else begin
        data_in_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((data_in_V_data_0_sel == 1'b1)) begin
        data_in_V_data_0_data_out = data_in_V_data_0_payload_B;
    end else begin
        data_in_V_data_0_data_out = data_in_V_data_0_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state2_io) | ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2))) & (state_var_V_load_reg_361 == 3'd2) & (1'b1 == ap_CS_fsm_state2)) | (~((data_in_V_data_0_vld_out == 1'b0) & (state_var_V == 3'd1)) & (state_var_V == 3'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        data_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        data_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((state_var_V_load_reg_361 == 3'd4) & (1'b1 == ap_CS_fsm_state3)) | ((state_var_V_load_reg_361 == 3'd3) & (1'b1 == ap_CS_fsm_state3)) | ((state_var_V_load_reg_361 == 3'd4) & (1'b1 == ap_CS_fsm_state2)) | ((state_var_V_load_reg_361 == 3'd3) & (1'b1 == ap_CS_fsm_state2)))) begin
        data_out_TDATA_blk_n = data_out_V_data_V_1_state[1'd1];
    end else begin
        data_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_441)) begin
        if ((state_var_V_load_reg_361 == 3'd3)) begin
            data_out_V_data_V_1_data_in = p_Result_s_4_fu_314_p6;
        end else if ((state_var_V_load_reg_361 == 3'd4)) begin
            data_out_V_data_V_1_data_in = p_Result_3_fu_293_p4;
        end else begin
            data_out_V_data_V_1_data_in = 'bx;
        end
    end else begin
        data_out_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((data_out_V_data_V_1_sel == 1'b1)) begin
        data_out_V_data_V_1_data_out = data_out_V_data_V_1_payload_B;
    end else begin
        data_out_V_data_V_1_data_out = data_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state2_io) | ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2))) & (state_var_V_load_reg_361 == 3'd4) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b1 == ap_block_state2_io) | ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2))) & (state_var_V_load_reg_361 == 3'd3) & (1'b1 == ap_CS_fsm_state2)))) begin
        data_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        data_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_441)) begin
        if ((state_var_V_load_reg_361 == 3'd3)) begin
            data_out_V_last_V_1_data_in = 1'd0;
        end else if ((state_var_V_load_reg_361 == 3'd4)) begin
            data_out_V_last_V_1_data_in = 1'd1;
        end else begin
            data_out_V_last_V_1_data_in = 'bx;
        end
    end else begin
        data_out_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((data_out_V_last_V_1_sel == 1'b1)) begin
        data_out_V_last_V_1_data_out = data_out_V_last_V_1_payload_B;
    end else begin
        data_out_V_last_V_1_data_out = data_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state2_io) | ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2))) & (state_var_V_load_reg_361 == 3'd4) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b1 == ap_block_state2_io) | ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2))) & (state_var_V_load_reg_361 == 3'd3) & (1'b1 == ap_CS_fsm_state2)))) begin
        data_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        data_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2))) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_ratio_counter_fu_161_ap_ce = 1'b1;
    end else begin
        grp_ratio_counter_fu_161_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state2_io) | ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2))) & (ap_predicate_op54_call_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((1'b1 == ap_block_state2_io) | ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2))) & (ap_predicate_op53_call_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_ratio_counter_fu_161_ap_start = 1'b1;
    end else begin
        grp_ratio_counter_fu_161_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((ap_predicate_op54_call_state2 == 1'b1)) begin
            grp_ratio_counter_fu_161_input_V = 1'd1;
        end else if ((ap_predicate_op53_call_state2 == 1'b1)) begin
            grp_ratio_counter_fu_161_input_V = 1'd0;
        end else begin
            grp_ratio_counter_fu_161_input_V = 'bx;
        end
    end else begin
        grp_ratio_counter_fu_161_input_V = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((data_in_V_data_0_vld_out == 1'b0) & (state_var_V == 3'd1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2))) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((data_out_V_last_V_1_ack_in == 1'b0) | (data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state3_io)) & (data_out_V_last_V_1_state[1'd0] == 1'b0) & (data_out_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V == 3'd1));
end

always @ (*) begin
    ap_block_state2 = ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2));
end

always @ (*) begin
    ap_block_state2_ignore_call0 = ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2));
end

always @ (*) begin
    ap_block_state2_io = (((data_out_V_data_V_1_ack_in == 1'b0) & (state_var_V_load_reg_361 == 3'd4)) | ((data_out_V_data_V_1_ack_in == 1'b0) & (state_var_V_load_reg_361 == 3'd3)));
end

always @ (*) begin
    ap_block_state3 = ((data_out_V_last_V_1_ack_in == 1'b0) | (data_out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = (((data_out_V_data_V_1_ack_in == 1'b0) & (state_var_V_load_reg_361 == 3'd4)) | ((data_out_V_data_V_1_ack_in == 1'b0) & (state_var_V_load_reg_361 == 3'd3)));
end

always @ (*) begin
    ap_condition_438 = (~((1'b1 == ap_block_state2_io) | ((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2))) & (state_var_V_load_reg_361 == 3'd2) & (1'b1 == ap_CS_fsm_state2));
end

always @ (*) begin
    ap_condition_441 = (~((data_in_V_data_0_vld_out == 1'b0) & (state_var_V_load_reg_361 == 3'd2)) & (1'b1 == ap_CS_fsm_state2));
end

always @ (*) begin
    ap_predicate_op53_call_state2 = ((tmp_6_reg_386 == 1'd0) & (state_var_V_load_reg_361 == 3'd1));
end

always @ (*) begin
    ap_predicate_op54_call_state2 = ((tmp_6_reg_386 == 1'd1) & (state_var_V_load_reg_361 == 3'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data_in_TREADY = data_in_V_last_V_0_state[1'd1];

assign data_in_V_data_0_ack_in = data_in_V_data_0_state[1'd1];

assign data_in_V_data_0_load_A = (~data_in_V_data_0_sel_wr & data_in_V_data_0_state_cmp_full);

assign data_in_V_data_0_load_B = (data_in_V_data_0_state_cmp_full & data_in_V_data_0_sel_wr);

assign data_in_V_data_0_sel = data_in_V_data_0_sel_rd;

assign data_in_V_data_0_state_cmp_full = ((data_in_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign data_in_V_data_0_vld_in = data_in_TVALID;

assign data_in_V_data_0_vld_out = data_in_V_data_0_state[1'd0];

assign data_in_V_last_V_0_vld_in = data_in_TVALID;

assign data_out_TDATA = data_out_V_data_V_1_data_out;

assign data_out_TLAST = data_out_V_last_V_1_data_out;

assign data_out_TVALID = data_out_V_last_V_1_state[1'd0];

assign data_out_V_data_V_1_ack_in = data_out_V_data_V_1_state[1'd1];

assign data_out_V_data_V_1_ack_out = data_out_TREADY;

assign data_out_V_data_V_1_load_A = (~data_out_V_data_V_1_sel_wr & data_out_V_data_V_1_state_cmp_full);

assign data_out_V_data_V_1_load_B = (data_out_V_data_V_1_state_cmp_full & data_out_V_data_V_1_sel_wr);

assign data_out_V_data_V_1_sel = data_out_V_data_V_1_sel_rd;

assign data_out_V_data_V_1_state_cmp_full = ((data_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign data_out_V_data_V_1_vld_out = data_out_V_data_V_1_state[1'd0];

assign data_out_V_last_V_1_ack_in = data_out_V_last_V_1_state[1'd1];

assign data_out_V_last_V_1_ack_out = data_out_TREADY;

assign data_out_V_last_V_1_load_A = (~data_out_V_last_V_1_sel_wr & data_out_V_last_V_1_state_cmp_full);

assign data_out_V_last_V_1_load_B = (data_out_V_last_V_1_state_cmp_full & data_out_V_last_V_1_sel_wr);

assign data_out_V_last_V_1_sel = data_out_V_last_V_1_sel_rd;

assign data_out_V_last_V_1_state_cmp_full = ((data_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign data_out_V_last_V_1_vld_out = data_out_V_last_V_1_state[1'd0];

assign extLd_fu_202_p1 = cooldown_10x;

assign p_Result_3_fu_293_p4 = {{{{24'd0}, {tmp_2_reg_376}}}, {32'd5}};

assign p_Result_s_4_fu_314_p6 = {{{{{{{{4'd8}, {seq_num_V_load_reg_365}}}, {16'd16}}}, {src_sid_V_read_reg_356}}}, {p_Result_2_reg_381}};

assign state_var_V_load_load_fu_190_p1 = state_var_V;

assign storemerge1_cast_cas_fu_336_p3 = ((count_ratio_trig_V[0:0] === 1'b1) ? 3'd3 : 3'd1);

assign tmp_1_fu_282_p2 = ((cooldown_cnt < extLd_reg_371) ? 1'b1 : 1'b0);

assign tmp_2_fu_206_p1 = param2_V[7:0];

assign tmp_3_fu_210_p1 = param1_V[11:0];

assign tmp_6_fu_252_p2 = ((tmp_fu_248_p1 == 16'd16384) ? 1'b1 : 1'b0);

assign tmp_7_fu_287_p2 = (cooldown_cnt + 32'd1);

assign tmp_9_fu_303_p2 = (12'd1 + seq_num_V_load_reg_365);

assign tmp_fu_248_p1 = data_in_V_data_0_data_out[15:0];

assign tmp_s_fu_214_p3 = {{tmp_3_fu_210_p1}, {8'd0}};

always @ (posedge ap_clk) begin
    cooldown_10x[7:0] <= 8'b00000000;
    extLd_reg_371[7:0] <= 8'b00000000;
    extLd_reg_371[31:20] <= 12'b000000000000;
end

endmodule //busytone_trig
