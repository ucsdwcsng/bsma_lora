// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="null_sink,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325tffg900-3,HLS_INPUT_CLOCK=4.650000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.838000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=193,HLS_SYN_LUT=254,HLS_VERSION=2018_3}" *)

module null_sink (
        ap_clk,
        ap_rst_n,
        null_data_in_TDATA,
        null_data_in_TVALID,
        null_data_in_TREADY,
        null_data_in_TLAST,
        act_data_in_TDATA,
        act_data_in_TVALID,
        act_data_in_TREADY,
        act_data_in_TLAST,
        act_data_out_TDATA,
        act_data_out_TVALID,
        act_data_out_TREADY,
        act_data_out_TLAST
);

parameter    ap_ST_iter0_fsm_state1 = 1'd1;
parameter    ap_ST_iter1_fsm_state2 = 2'd2;
parameter    ap_ST_iter2_fsm_state3 = 2'd2;
parameter    ap_ST_iter1_fsm_state0 = 2'd1;
parameter    ap_ST_iter2_fsm_state0 = 2'd1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] null_data_in_TDATA;
input   null_data_in_TVALID;
output   null_data_in_TREADY;
input  [0:0] null_data_in_TLAST;
input  [31:0] act_data_in_TDATA;
input   act_data_in_TVALID;
output   act_data_in_TREADY;
input  [0:0] act_data_in_TLAST;
output  [31:0] act_data_out_TDATA;
output   act_data_out_TVALID;
input   act_data_out_TREADY;
output  [0:0] act_data_out_TLAST;

 reg    ap_rst_n_inv;
wire    null_data_in_V_data_V_0_vld_in;
wire    null_data_in_V_data_V_0_vld_out;
reg    null_data_in_V_data_V_0_ack_out;
reg   [1:0] null_data_in_V_data_V_0_state;
reg   [0:0] null_data_in_V_last_V_0_data_out;
wire    null_data_in_V_last_V_0_vld_in;
wire    null_data_in_V_last_V_0_vld_out;
wire    null_data_in_V_last_V_0_ack_in;
reg    null_data_in_V_last_V_0_ack_out;
reg   [0:0] null_data_in_V_last_V_0_payload_A;
reg   [0:0] null_data_in_V_last_V_0_payload_B;
reg    null_data_in_V_last_V_0_sel_rd;
reg    null_data_in_V_last_V_0_sel_wr;
wire    null_data_in_V_last_V_0_sel;
wire    null_data_in_V_last_V_0_load_A;
wire    null_data_in_V_last_V_0_load_B;
reg   [1:0] null_data_in_V_last_V_0_state;
wire    null_data_in_V_last_V_0_state_cmp_full;
reg   [31:0] act_data_in_V_data_V_0_data_out;
wire    act_data_in_V_data_V_0_vld_in;
wire    act_data_in_V_data_V_0_vld_out;
wire    act_data_in_V_data_V_0_ack_in;
reg    act_data_in_V_data_V_0_ack_out;
reg   [31:0] act_data_in_V_data_V_0_payload_A;
reg   [31:0] act_data_in_V_data_V_0_payload_B;
reg    act_data_in_V_data_V_0_sel_rd;
reg    act_data_in_V_data_V_0_sel_wr;
wire    act_data_in_V_data_V_0_sel;
wire    act_data_in_V_data_V_0_load_A;
wire    act_data_in_V_data_V_0_load_B;
reg   [1:0] act_data_in_V_data_V_0_state;
wire    act_data_in_V_data_V_0_state_cmp_full;
wire    act_data_in_V_last_V_0_vld_in;
reg    act_data_in_V_last_V_0_ack_out;
reg   [1:0] act_data_in_V_last_V_0_state;
reg   [31:0] act_data_out_V_data_V_1_data_out;
reg    act_data_out_V_data_V_1_vld_in;
wire    act_data_out_V_data_V_1_vld_out;
wire    act_data_out_V_data_V_1_ack_in;
wire    act_data_out_V_data_V_1_ack_out;
reg   [31:0] act_data_out_V_data_V_1_payload_A;
reg   [31:0] act_data_out_V_data_V_1_payload_B;
reg    act_data_out_V_data_V_1_sel_rd;
reg    act_data_out_V_data_V_1_sel_wr;
wire    act_data_out_V_data_V_1_sel;
wire    act_data_out_V_data_V_1_load_A;
wire    act_data_out_V_data_V_1_load_B;
reg   [1:0] act_data_out_V_data_V_1_state;
wire    act_data_out_V_data_V_1_state_cmp_full;
reg   [0:0] act_data_out_V_last_V_1_data_out;
reg    act_data_out_V_last_V_1_vld_in;
wire    act_data_out_V_last_V_1_vld_out;
wire    act_data_out_V_last_V_1_ack_in;
wire    act_data_out_V_last_V_1_ack_out;
reg   [0:0] act_data_out_V_last_V_1_payload_A;
reg   [0:0] act_data_out_V_last_V_1_payload_B;
reg    act_data_out_V_last_V_1_sel_rd;
reg    act_data_out_V_last_V_1_sel_wr;
wire    act_data_out_V_last_V_1_sel;
wire    act_data_out_V_last_V_1_load_A;
wire    act_data_out_V_last_V_1_load_B;
reg   [1:0] act_data_out_V_last_V_1_state;
wire    act_data_out_V_last_V_1_state_cmp_full;
reg   [0:0] state_var_V;
reg   [0:0] last_flag_V;
reg    null_data_in_TDATA_blk_n;
reg   [0:0] ap_CS_iter0_fsm;
wire    ap_CS_iter0_fsm_state1;
reg   [1:0] ap_CS_iter1_fsm;
wire    ap_CS_iter1_fsm_state2;
reg   [1:0] ap_CS_iter2_fsm;
wire    ap_CS_iter2_fsm_state3;
reg    act_data_in_TDATA_blk_n;
reg    act_data_out_TDATA_blk_n;
reg   [0:0] state_var_V_load_reg_114;
reg   [0:0] state_var_V_load_reg_114_pp0_iter1_reg;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg   [31:0] tmp_data_V_reg_118;
reg   [0:0] ap_phi_mux_storemerge_phi_fu_77_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_storemerge_reg_74;
reg   [0:0] ap_NS_iter0_fsm;
reg   [1:0] ap_NS_iter1_fsm;
reg   [1:0] ap_NS_iter2_fsm;

// power-on initialization
initial begin
#0 null_data_in_V_data_V_0_state = 2'd0;
#0 null_data_in_V_last_V_0_sel_rd = 1'b0;
#0 null_data_in_V_last_V_0_sel_wr = 1'b0;
#0 null_data_in_V_last_V_0_state = 2'd0;
#0 act_data_in_V_data_V_0_sel_rd = 1'b0;
#0 act_data_in_V_data_V_0_sel_wr = 1'b0;
#0 act_data_in_V_data_V_0_state = 2'd0;
#0 act_data_in_V_last_V_0_state = 2'd0;
#0 act_data_out_V_data_V_1_sel_rd = 1'b0;
#0 act_data_out_V_data_V_1_sel_wr = 1'b0;
#0 act_data_out_V_data_V_1_state = 2'd0;
#0 act_data_out_V_last_V_1_sel_rd = 1'b0;
#0 act_data_out_V_last_V_1_sel_wr = 1'b0;
#0 act_data_out_V_last_V_1_state = 2'd0;
#0 state_var_V = 1'd0;
#0 last_flag_V = 1'd0;
#0 ap_CS_iter0_fsm = 1'd1;
#0 ap_CS_iter1_fsm = 2'd1;
#0 ap_CS_iter2_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        act_data_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == act_data_in_V_data_V_0_ack_out) & (1'b1 == act_data_in_V_data_V_0_vld_out))) begin
            act_data_in_V_data_V_0_sel_rd <= ~act_data_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        act_data_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == act_data_in_V_data_V_0_ack_in) & (1'b1 == act_data_in_V_data_V_0_vld_in))) begin
            act_data_in_V_data_V_0_sel_wr <= ~act_data_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        act_data_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == act_data_in_V_data_V_0_vld_in) & (2'd2 == act_data_in_V_data_V_0_state)) | ((1'b0 == act_data_in_V_data_V_0_vld_in) & (2'd3 == act_data_in_V_data_V_0_state) & (1'b1 == act_data_in_V_data_V_0_ack_out)))) begin
            act_data_in_V_data_V_0_state <= 2'd2;
        end else if ((((1'b0 == act_data_in_V_data_V_0_ack_out) & (2'd1 == act_data_in_V_data_V_0_state)) | ((1'b0 == act_data_in_V_data_V_0_ack_out) & (2'd3 == act_data_in_V_data_V_0_state) & (1'b1 == act_data_in_V_data_V_0_vld_in)))) begin
            act_data_in_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == act_data_in_V_data_V_0_vld_in) & (1'b1 == act_data_in_V_data_V_0_ack_out)) & ~((1'b0 == act_data_in_V_data_V_0_ack_out) & (1'b1 == act_data_in_V_data_V_0_vld_in)) & (2'd3 == act_data_in_V_data_V_0_state)) | ((2'd1 == act_data_in_V_data_V_0_state) & (1'b1 == act_data_in_V_data_V_0_ack_out)) | ((2'd2 == act_data_in_V_data_V_0_state) & (1'b1 == act_data_in_V_data_V_0_vld_in)))) begin
            act_data_in_V_data_V_0_state <= 2'd3;
        end else begin
            act_data_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        act_data_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == act_data_in_V_last_V_0_vld_in) & (2'd2 == act_data_in_V_last_V_0_state)) | ((1'b0 == act_data_in_V_last_V_0_vld_in) & (2'd3 == act_data_in_V_last_V_0_state) & (1'b1 == act_data_in_V_last_V_0_ack_out)))) begin
            act_data_in_V_last_V_0_state <= 2'd2;
        end else if ((((1'b0 == act_data_in_V_last_V_0_ack_out) & (2'd1 == act_data_in_V_last_V_0_state)) | ((1'b0 == act_data_in_V_last_V_0_ack_out) & (2'd3 == act_data_in_V_last_V_0_state) & (1'b1 == act_data_in_V_last_V_0_vld_in)))) begin
            act_data_in_V_last_V_0_state <= 2'd1;
        end else if (((~((1'b0 == act_data_in_V_last_V_0_vld_in) & (1'b1 == act_data_in_V_last_V_0_ack_out)) & ~((1'b0 == act_data_in_V_last_V_0_ack_out) & (1'b1 == act_data_in_V_last_V_0_vld_in)) & (2'd3 == act_data_in_V_last_V_0_state)) | ((2'd1 == act_data_in_V_last_V_0_state) & (1'b1 == act_data_in_V_last_V_0_ack_out)) | ((2'd2 == act_data_in_V_last_V_0_state) & (1'b1 == act_data_in_V_last_V_0_vld_in)))) begin
            act_data_in_V_last_V_0_state <= 2'd3;
        end else begin
            act_data_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        act_data_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == act_data_out_V_data_V_1_ack_out) & (1'b1 == act_data_out_V_data_V_1_vld_out))) begin
            act_data_out_V_data_V_1_sel_rd <= ~act_data_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        act_data_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == act_data_out_V_data_V_1_ack_in) & (1'b1 == act_data_out_V_data_V_1_vld_in))) begin
            act_data_out_V_data_V_1_sel_wr <= ~act_data_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        act_data_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == act_data_out_V_data_V_1_vld_in) & (2'd2 == act_data_out_V_data_V_1_state)) | ((1'b0 == act_data_out_V_data_V_1_vld_in) & (2'd3 == act_data_out_V_data_V_1_state) & (1'b1 == act_data_out_V_data_V_1_ack_out)))) begin
            act_data_out_V_data_V_1_state <= 2'd2;
        end else if ((((1'b0 == act_data_out_V_data_V_1_ack_out) & (2'd1 == act_data_out_V_data_V_1_state)) | ((1'b0 == act_data_out_V_data_V_1_ack_out) & (2'd3 == act_data_out_V_data_V_1_state) & (1'b1 == act_data_out_V_data_V_1_vld_in)))) begin
            act_data_out_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == act_data_out_V_data_V_1_vld_in) & (1'b1 == act_data_out_V_data_V_1_ack_out)) & ~((1'b0 == act_data_out_V_data_V_1_ack_out) & (1'b1 == act_data_out_V_data_V_1_vld_in)) & (2'd3 == act_data_out_V_data_V_1_state)) | ((2'd1 == act_data_out_V_data_V_1_state) & (1'b1 == act_data_out_V_data_V_1_ack_out)) | ((2'd2 == act_data_out_V_data_V_1_state) & (1'b1 == act_data_out_V_data_V_1_vld_in)))) begin
            act_data_out_V_data_V_1_state <= 2'd3;
        end else begin
            act_data_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        act_data_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == act_data_out_V_last_V_1_ack_out) & (1'b1 == act_data_out_V_last_V_1_vld_out))) begin
            act_data_out_V_last_V_1_sel_rd <= ~act_data_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        act_data_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == act_data_out_V_last_V_1_ack_in) & (1'b1 == act_data_out_V_last_V_1_vld_in))) begin
            act_data_out_V_last_V_1_sel_wr <= ~act_data_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        act_data_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == act_data_out_V_last_V_1_vld_in) & (2'd2 == act_data_out_V_last_V_1_state)) | ((1'b0 == act_data_out_V_last_V_1_vld_in) & (2'd3 == act_data_out_V_last_V_1_state) & (1'b1 == act_data_out_V_last_V_1_ack_out)))) begin
            act_data_out_V_last_V_1_state <= 2'd2;
        end else if ((((1'b0 == act_data_out_V_last_V_1_ack_out) & (2'd1 == act_data_out_V_last_V_1_state)) | ((1'b0 == act_data_out_V_last_V_1_ack_out) & (2'd3 == act_data_out_V_last_V_1_state) & (1'b1 == act_data_out_V_last_V_1_vld_in)))) begin
            act_data_out_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == act_data_out_V_last_V_1_vld_in) & (1'b1 == act_data_out_V_last_V_1_ack_out)) & ~((1'b0 == act_data_out_V_last_V_1_ack_out) & (1'b1 == act_data_out_V_last_V_1_vld_in)) & (2'd3 == act_data_out_V_last_V_1_state)) | ((2'd1 == act_data_out_V_last_V_1_state) & (1'b1 == act_data_out_V_last_V_1_ack_out)) | ((2'd2 == act_data_out_V_last_V_1_state) & (1'b1 == act_data_out_V_last_V_1_vld_in)))) begin
            act_data_out_V_last_V_1_state <= 2'd3;
        end else begin
            act_data_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter0_fsm <= ap_ST_iter0_fsm_state1;
    end else begin
        ap_CS_iter0_fsm <= ap_NS_iter0_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter1_fsm <= ap_ST_iter1_fsm_state0;
    end else begin
        ap_CS_iter1_fsm <= ap_NS_iter1_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_iter2_fsm <= ap_ST_iter2_fsm_state0;
    end else begin
        ap_CS_iter2_fsm <= ap_NS_iter2_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        null_data_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((null_data_in_V_data_V_0_vld_in == 1'b0) & (null_data_in_V_data_V_0_state == 2'd2)) | ((null_data_in_V_data_V_0_vld_in == 1'b0) & (null_data_in_V_data_V_0_ack_out == 1'b1) & (null_data_in_V_data_V_0_state == 2'd3)))) begin
            null_data_in_V_data_V_0_state <= 2'd2;
        end else if ((((null_data_in_V_data_V_0_ack_out == 1'b0) & (null_data_in_V_data_V_0_state == 2'd1)) | ((null_data_in_V_data_V_0_ack_out == 1'b0) & (null_data_in_V_data_V_0_vld_in == 1'b1) & (null_data_in_V_data_V_0_state == 2'd3)))) begin
            null_data_in_V_data_V_0_state <= 2'd1;
        end else if (((~((null_data_in_V_data_V_0_vld_in == 1'b0) & (null_data_in_V_data_V_0_ack_out == 1'b1)) & ~((null_data_in_V_data_V_0_ack_out == 1'b0) & (null_data_in_V_data_V_0_vld_in == 1'b1)) & (null_data_in_V_data_V_0_state == 2'd3)) | ((null_data_in_V_data_V_0_ack_out == 1'b1) & (null_data_in_V_data_V_0_state == 2'd1)) | ((null_data_in_V_data_V_0_vld_in == 1'b1) & (null_data_in_V_data_V_0_state == 2'd2)))) begin
            null_data_in_V_data_V_0_state <= 2'd3;
        end else begin
            null_data_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        null_data_in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((null_data_in_V_last_V_0_ack_out == 1'b1) & (null_data_in_V_last_V_0_vld_out == 1'b1))) begin
            null_data_in_V_last_V_0_sel_rd <= ~null_data_in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        null_data_in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((null_data_in_V_last_V_0_ack_in == 1'b1) & (null_data_in_V_last_V_0_vld_in == 1'b1))) begin
            null_data_in_V_last_V_0_sel_wr <= ~null_data_in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        null_data_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((null_data_in_V_last_V_0_vld_in == 1'b0) & (null_data_in_V_last_V_0_state == 2'd2)) | ((null_data_in_V_last_V_0_vld_in == 1'b0) & (null_data_in_V_last_V_0_state == 2'd3) & (null_data_in_V_last_V_0_ack_out == 1'b1)))) begin
            null_data_in_V_last_V_0_state <= 2'd2;
        end else if ((((null_data_in_V_last_V_0_ack_out == 1'b0) & (null_data_in_V_last_V_0_state == 2'd1)) | ((null_data_in_V_last_V_0_ack_out == 1'b0) & (null_data_in_V_last_V_0_state == 2'd3) & (null_data_in_V_last_V_0_vld_in == 1'b1)))) begin
            null_data_in_V_last_V_0_state <= 2'd1;
        end else if (((~((null_data_in_V_last_V_0_vld_in == 1'b0) & (null_data_in_V_last_V_0_ack_out == 1'b1)) & ~((null_data_in_V_last_V_0_ack_out == 1'b0) & (null_data_in_V_last_V_0_vld_in == 1'b1)) & (null_data_in_V_last_V_0_state == 2'd3)) | ((null_data_in_V_last_V_0_state == 2'd1) & (null_data_in_V_last_V_0_ack_out == 1'b1)) | ((null_data_in_V_last_V_0_state == 2'd2) & (null_data_in_V_last_V_0_vld_in == 1'b1)))) begin
            null_data_in_V_last_V_0_state <= 2'd3;
        end else begin
            null_data_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == act_data_in_V_data_V_0_load_A)) begin
        act_data_in_V_data_V_0_payload_A <= act_data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == act_data_in_V_data_V_0_load_B)) begin
        act_data_in_V_data_V_0_payload_B <= act_data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == act_data_out_V_data_V_1_load_A)) begin
        act_data_out_V_data_V_1_payload_A <= tmp_data_V_reg_118;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == act_data_out_V_data_V_1_load_B)) begin
        act_data_out_V_data_V_1_payload_B <= tmp_data_V_reg_118;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == act_data_out_V_last_V_1_load_A)) begin
        act_data_out_V_last_V_1_payload_A <= last_flag_V;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == act_data_out_V_last_V_1_load_B)) begin
        act_data_out_V_last_V_1_payload_B <= last_flag_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b0 == act_data_in_V_data_V_0_vld_out) & (state_var_V == 1'd1)) | ((null_data_in_V_data_V_0_vld_out == 1'b0) & (state_var_V == 1'd0)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (state_var_V == 1'd0))) begin
        last_flag_V <= null_data_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((null_data_in_V_last_V_0_load_A == 1'b1)) begin
        null_data_in_V_last_V_0_payload_A <= null_data_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((null_data_in_V_last_V_0_load_B == 1'b1)) begin
        null_data_in_V_last_V_0_payload_B <= null_data_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b0 == act_data_in_V_data_V_0_vld_out) & (state_var_V == 1'd1)) | ((null_data_in_V_data_V_0_vld_out == 1'b0) & (state_var_V == 1'd0)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
        state_var_V <= ap_phi_mux_storemerge_phi_fu_77_p4;
        state_var_V_load_reg_114 <= state_var_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in) | (1'b1 == ap_block_state3_io)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
        state_var_V_load_reg_114_pp0_iter1_reg <= state_var_V_load_reg_114;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b0 == act_data_in_V_data_V_0_vld_out) & (state_var_V == 1'd1)) | ((null_data_in_V_data_V_0_vld_out == 1'b0) & (state_var_V == 1'd0)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (state_var_V == 1'd1))) begin
        tmp_data_V_reg_118 <= act_data_in_V_data_V_0_data_out;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (state_var_V == 1'd1))) begin
        act_data_in_TDATA_blk_n = act_data_in_V_data_V_0_state[1'd0];
    end else begin
        act_data_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((1'b0 == act_data_in_V_data_V_0_vld_out) & (state_var_V == 1'd1)) | ((null_data_in_V_data_V_0_vld_out == 1'b0) & (state_var_V == 1'd0)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (state_var_V == 1'd1))) begin
        act_data_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        act_data_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == act_data_in_V_data_V_0_sel)) begin
        act_data_in_V_data_V_0_data_out = act_data_in_V_data_V_0_payload_B;
    end else begin
        act_data_in_V_data_V_0_data_out = act_data_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~(((1'b0 == act_data_in_V_data_V_0_vld_out) & (state_var_V == 1'd1)) | ((null_data_in_V_data_V_0_vld_out == 1'b0) & (state_var_V == 1'd0)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (state_var_V == 1'd1))) begin
        act_data_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        act_data_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_iter2_fsm_state3) & (state_var_V_load_reg_114_pp0_iter1_reg == 1'd1)) | ((1'b1 == ap_CS_iter1_fsm_state2) & (state_var_V_load_reg_114 == 1'd1)))) begin
        act_data_out_TDATA_blk_n = act_data_out_V_data_V_1_state[1'd1];
    end else begin
        act_data_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == act_data_out_V_data_V_1_sel)) begin
        act_data_out_V_data_V_1_data_out = act_data_out_V_data_V_1_payload_B;
    end else begin
        act_data_out_V_data_V_1_data_out = act_data_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in) | (1'b1 == ap_block_state3_io)))) & (1'b1 == ap_CS_iter1_fsm_state2) & (state_var_V_load_reg_114 == 1'd1))) begin
        act_data_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        act_data_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == act_data_out_V_last_V_1_sel)) begin
        act_data_out_V_last_V_1_data_out = act_data_out_V_last_V_1_payload_B;
    end else begin
        act_data_out_V_last_V_1_data_out = act_data_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in) | (1'b1 == ap_block_state3_io)))) & (1'b1 == ap_CS_iter1_fsm_state2) & (state_var_V_load_reg_114 == 1'd1))) begin
        act_data_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        act_data_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_iter0_fsm_state1)) begin
        if ((state_var_V == 1'd1)) begin
            ap_phi_mux_storemerge_phi_fu_77_p4 = 1'd0;
        end else if ((state_var_V == 1'd0)) begin
            ap_phi_mux_storemerge_phi_fu_77_p4 = 1'd1;
        end else begin
            ap_phi_mux_storemerge_phi_fu_77_p4 = ap_phi_reg_pp0_iter0_storemerge_reg_74;
        end
    end else begin
        ap_phi_mux_storemerge_phi_fu_77_p4 = ap_phi_reg_pp0_iter0_storemerge_reg_74;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_iter0_fsm_state1) & (state_var_V == 1'd0))) begin
        null_data_in_TDATA_blk_n = null_data_in_V_data_V_0_state[1'd0];
    end else begin
        null_data_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((1'b0 == act_data_in_V_data_V_0_vld_out) & (state_var_V == 1'd1)) | ((null_data_in_V_data_V_0_vld_out == 1'b0) & (state_var_V == 1'd0)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (state_var_V == 1'd0))) begin
        null_data_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        null_data_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((~(((1'b0 == act_data_in_V_data_V_0_vld_out) & (state_var_V == 1'd1)) | ((null_data_in_V_data_V_0_vld_out == 1'b0) & (state_var_V == 1'd0)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1) & (state_var_V == 1'd0))) begin
        null_data_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        null_data_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((null_data_in_V_last_V_0_sel == 1'b1)) begin
        null_data_in_V_last_V_0_data_out = null_data_in_V_last_V_0_payload_B;
    end else begin
        null_data_in_V_last_V_0_data_out = null_data_in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_iter0_fsm)
        ap_ST_iter0_fsm_state1 : begin
            ap_NS_iter0_fsm = ap_ST_iter0_fsm_state1;
        end
        default : begin
            ap_NS_iter0_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter1_fsm)
        ap_ST_iter1_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in) | (1'b1 == ap_block_state3_io)))) & ~(((1'b0 == act_data_in_V_data_V_0_vld_out) & (state_var_V == 1'd1)) | ((null_data_in_V_data_V_0_vld_out == 1'b0) & (state_var_V == 1'd0))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in) | (1'b1 == ap_block_state3_io)))) & ((1'b0 == ap_CS_iter0_fsm_state1) | ((1'b1 == ap_CS_iter0_fsm_state1) & (((1'b0 == act_data_in_V_data_V_0_vld_out) & (state_var_V == 1'd1)) | ((null_data_in_V_data_V_0_vld_out == 1'b0) & (state_var_V == 1'd0))))))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end
        end
        ap_ST_iter1_fsm_state0 : begin
            if ((~(((1'b0 == act_data_in_V_data_V_0_vld_out) & (state_var_V == 1'd1)) | ((null_data_in_V_data_V_0_vld_out == 1'b0) & (state_var_V == 1'd0)) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in) | (1'b1 == ap_block_state3_io))) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))) & (1'b1 == ap_CS_iter0_fsm_state1))) begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state2;
            end else begin
                ap_NS_iter1_fsm = ap_ST_iter1_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter1_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    case (ap_CS_iter2_fsm)
        ap_ST_iter2_fsm_state3 : begin
            if ((~((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in) | (1'b1 == ap_block_state3_io)) & (1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else if ((~((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in) | (1'b1 == ap_block_state3_io)) & ((1'b0 == ap_CS_iter1_fsm_state2) | ((1'b1 == ap_CS_iter1_fsm_state2) & (1'b1 == ap_block_state2_io))))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end
        end
        ap_ST_iter2_fsm_state0 : begin
            if ((~((1'b1 == ap_block_state2_io) | ((1'b1 == ap_CS_iter2_fsm_state3) & ((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in) | (1'b1 == ap_block_state3_io)))) & (1'b1 == ap_CS_iter1_fsm_state2))) begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state3;
            end else begin
                ap_NS_iter2_fsm = ap_ST_iter2_fsm_state0;
            end
        end
        default : begin
            ap_NS_iter2_fsm = 'bx;
        end
    endcase
end

assign act_data_in_TREADY = act_data_in_V_last_V_0_state[1'd1];

assign act_data_in_V_data_V_0_ack_in = act_data_in_V_data_V_0_state[1'd1];

assign act_data_in_V_data_V_0_load_A = (~act_data_in_V_data_V_0_sel_wr & act_data_in_V_data_V_0_state_cmp_full);

assign act_data_in_V_data_V_0_load_B = (act_data_in_V_data_V_0_state_cmp_full & act_data_in_V_data_V_0_sel_wr);

assign act_data_in_V_data_V_0_sel = act_data_in_V_data_V_0_sel_rd;

assign act_data_in_V_data_V_0_state_cmp_full = ((act_data_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign act_data_in_V_data_V_0_vld_in = act_data_in_TVALID;

assign act_data_in_V_data_V_0_vld_out = act_data_in_V_data_V_0_state[1'd0];

assign act_data_in_V_last_V_0_vld_in = act_data_in_TVALID;

assign act_data_out_TDATA = act_data_out_V_data_V_1_data_out;

assign act_data_out_TLAST = act_data_out_V_last_V_1_data_out;

assign act_data_out_TVALID = act_data_out_V_last_V_1_state[1'd0];

assign act_data_out_V_data_V_1_ack_in = act_data_out_V_data_V_1_state[1'd1];

assign act_data_out_V_data_V_1_ack_out = act_data_out_TREADY;

assign act_data_out_V_data_V_1_load_A = (~act_data_out_V_data_V_1_sel_wr & act_data_out_V_data_V_1_state_cmp_full);

assign act_data_out_V_data_V_1_load_B = (act_data_out_V_data_V_1_state_cmp_full & act_data_out_V_data_V_1_sel_wr);

assign act_data_out_V_data_V_1_sel = act_data_out_V_data_V_1_sel_rd;

assign act_data_out_V_data_V_1_state_cmp_full = ((act_data_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign act_data_out_V_data_V_1_vld_out = act_data_out_V_data_V_1_state[1'd0];

assign act_data_out_V_last_V_1_ack_in = act_data_out_V_last_V_1_state[1'd1];

assign act_data_out_V_last_V_1_ack_out = act_data_out_TREADY;

assign act_data_out_V_last_V_1_load_A = (~act_data_out_V_last_V_1_sel_wr & act_data_out_V_last_V_1_state_cmp_full);

assign act_data_out_V_last_V_1_load_B = (act_data_out_V_last_V_1_state_cmp_full & act_data_out_V_last_V_1_sel_wr);

assign act_data_out_V_last_V_1_sel = act_data_out_V_last_V_1_sel_rd;

assign act_data_out_V_last_V_1_state_cmp_full = ((act_data_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign act_data_out_V_last_V_1_vld_out = act_data_out_V_last_V_1_state[1'd0];

assign ap_CS_iter0_fsm_state1 = ap_CS_iter0_fsm[32'd0];

assign ap_CS_iter1_fsm_state2 = ap_CS_iter1_fsm[32'd1];

assign ap_CS_iter2_fsm_state3 = ap_CS_iter2_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (((1'b0 == act_data_in_V_data_V_0_vld_out) & (state_var_V == 1'd1)) | ((null_data_in_V_data_V_0_vld_out == 1'b0) & (state_var_V == 1'd0)));
end

always @ (*) begin
    ap_block_state2_io = ((1'b0 == act_data_out_V_data_V_1_ack_in) & (state_var_V_load_reg_114 == 1'd1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((1'b0 == act_data_out_V_data_V_1_ack_in) & (state_var_V_load_reg_114_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((1'b0 == act_data_out_V_last_V_1_ack_in) | (1'b0 == act_data_out_V_data_V_1_ack_in));
end

assign ap_phi_reg_pp0_iter0_storemerge_reg_74 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign null_data_in_TREADY = null_data_in_V_last_V_0_state[1'd1];

assign null_data_in_V_data_V_0_vld_in = null_data_in_TVALID;

assign null_data_in_V_data_V_0_vld_out = null_data_in_V_data_V_0_state[1'd0];

assign null_data_in_V_last_V_0_ack_in = null_data_in_V_last_V_0_state[1'd1];

assign null_data_in_V_last_V_0_load_A = (null_data_in_V_last_V_0_state_cmp_full & ~null_data_in_V_last_V_0_sel_wr);

assign null_data_in_V_last_V_0_load_B = (null_data_in_V_last_V_0_state_cmp_full & null_data_in_V_last_V_0_sel_wr);

assign null_data_in_V_last_V_0_sel = null_data_in_V_last_V_0_sel_rd;

assign null_data_in_V_last_V_0_state_cmp_full = ((null_data_in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign null_data_in_V_last_V_0_vld_in = null_data_in_TVALID;

assign null_data_in_V_last_V_0_vld_out = null_data_in_V_last_V_0_state[1'd0];

endmodule //null_sink
